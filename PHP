ANSWER : 31
<?php
$numbers = [10, 20, 30, 40, 50];

// Remove the first element
$firstElement = array_shift($numbers);

echo "Removed element: $firstElement\n";
print_r($numbers);
?>

OUTPUT :
Removed element: 10
Array
(
    [0] => 20
    [1] => 30
    [2] => 40
    [3] => 50
)


ANSWER : 32

A)
<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>

OUTPUT :
Contact me at @dmin@ex@mple.com.


B)
<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>

OUTPUT : 
Array
(
    [2] => emily
)

ANMSWER : 33

<?php
// Define a 2D (multidimensional) array as a matrix
$matrix = array(
    array(11, 12, 13),  // Row 0
    array(21, 22, 23),  // Row 1 (second row)
    array(31, 32, 33)   // Row 2
);

// Access the value in the second row (index 1), third column (index 2)
$value = $matrix[1][2];

// Display it
echo "The value in the second row and third column is: " . $value;
?>


ANSWER  : 34

<?php
// Input string
$text = "Hello world! This is a hello example. HELLO there.";

// The word to find and the word to replace with
$searchWord = "hello";
$replacementWord = "hi";

// Build the regex pattern with word boundaries \b for whole-word matching
// Use preg_quote to escape any special regex chars in the search word
$pattern = '/\b' . preg_quote($searchWord, '/') . '\b/i';

// Perform the replacement using preg_replace()
$result = preg_replace($pattern, $replacementWord, $text);

// Display the result
echo $result;
?>


OUTPUT : 

hi world! This is a hi example. hi there.


ANSWER : 35

<?php
// The string to search within
$mainString = "The quick brown fox jumps over the lazy dog";

// Array of words to search for
$searchWords = ["fox", "cat", "dog"];

// Loop through the array and check each word
foreach ($searchWords as $word) {
    if (strpos($mainString, $word) !== false) {
        echo "Found '{$word}' in the string.\n";
    } else {
        echo "Did NOT find '{$word}' in the string.\n";
    }
}
?>

OUTPUT : 
<?php
$mainString = "The quick brown fox jumps over the lazy dog";
$searchWords = ["fox", "cat", "dog"];

foreach ($searchWords as $word) {
    if (str_contains($mainString, $word)) {
        echo "Found '{$word}' in the string.\n";
    } else {
        echo "Did NOT find '{$word}' in the string.\n";
    }
}
?>

ANSWER : 36
<?php
// Create an array of fruits
$fruits = array("apple", "banana", "cherry");

// Display the third element (index 2)
echo $fruits[2];
?>

OUTPUT : 

cherry


ANSWER : 37
<?php
$stack = [];
array_push($stack, 'first', 'second', 'third');
echo array_pop($stack);  // Outputs: third

print_r($stack);
// Outputs:
// Array
// ( [0] => first [1] => second )
?>


ANSWER : 38

<?php
// 1. Define an array
$fruits = ["apple", "banana", "cherry", "date"];

// 2. Initialize a counter (index)
$i = 0;

// 3. Iterate using while loop
while ($i < count($fruits)) {
    echo "Element at index $i: " . $fruits[$i] . "\n";
    $i++;
}
?>

OUTPUT : 

Element at index 0: apple
Element at index 1: banana
Element at index 2: cherry
Element at index 3: date


ANSWER : 39

<?php
// 1. Input: Array of students and their test scores
$students = [
    'Alice'   => ['scores' => [85, 92, 78]],
    'Bob'     => ['scores' => [70, 68, 75]],
    'Charlie' => ['scores' => [95, 98, 100]],
];

// 2. Function to determine letter grade from average score
function calculateGrade(float $avg): string {
    if ($avg >= 90) return 'A';
    elseif ($avg >= 80) return 'B';
    elseif ($avg >= 70) return 'C';
    elseif ($avg >= 60) return 'D';
    else return 'F';
}

// 3. Process each student to compute their average and grade
foreach ($students as $name => &$data) {
    $scores = $data['scores'];
    $total = array_sum($scores);
    $count = count($scores);
    $average = $total / $count;
    $grade = calculateGrade($average);

    // Store results back in the array
    $data['average'] = round($average, 2);
    $data['grade'] = $grade;
}
unset($data); // break reference

// 4. Output: Summary report
echo "=== Grade Summary Report ===\n";
foreach ($students as $name => $data) {
    echo "Student: {$name}\n";
    echo "Scores: " . implode(', ', $data['scores']) . "\n";
    echo "Average: {$data['average']}\n";
    echo "Grade: {$data['grade']}\n";
    echo "-----------------------------\n";
}
?>


OUTPUT : 
=== Grade Summary Report ===
Student: Alice
Scores: 85, 92, 78
Average: 85
Grade: B
-----------------------------
Student: Bob
Scores: 70, 68, 75
Average: 71
Grade: C
-----------------------------
Student: Charlie
Scores: 95, 98, 100
Average: 97.67
Grade: A
-----------------------------

ANSWER : 40
<?php
// 1. Input: Array of students and their test scores
$students = [
    'Alice'   => ['scores' => [85, 92, 78]],
    'Bob'     => ['scores' => [70, 68, 75]],
    'Charlie' => ['scores' => [95, 98, 100]],
];

// 2. Function to determine letter grade from average score
function calculateGrade(float $avg): string {
    if ($avg >= 90) return 'A';
    elseif ($avg >= 80) return 'B';
    elseif ($avg >= 70) return 'C';
    elseif ($avg >= 60) return 'D';
    else return 'F';
}

// 3. Process each student to compute their average and grade
foreach ($students as $name => &$data) {
    $scores = $data['scores'];
    $total = array_sum($scores);
    $count = count($scores);
    $average = $total / $count;
    $grade = calculateGrade($average);

    // Store results back in the array
    $data['average'] = round($average, 2);
    $data['grade'] = $grade;
}
unset($data); // break reference

// 4. Output: Summary report
echo "=== Grade Summary Report ===\n";
foreach ($students as $name => $data) {
    echo "Student: {$name}\n";
    echo "Scores: " . implode(', ', $data['scores']) . "\n";
    echo "Average: {$data['average']}\n";
    echo "Grade: {$data['grade']}\n";
    echo "-----------------------------\n";
}
?>
OUTPUT :
=== Grade Summary Report ===
Student: Alice
Scores: 85, 92, 78
Average: 85
Grade: B
-----------------------------
Student: Bob
Scores: 70, 68, 75
Average: 71
Grade: C
-----------------------------
Student: Charlie
Scores: 95, 98, 100
Average: 97.67
Grade: A
-----------------------------

ANSWER : 41

<?php
// Sample string containing multiple emails
$text = "Please contact us at support@example.com or admin@domain.net. CC: info123@sub.domain.org.";

// Define a regex pattern to match standard email formats (case-insensitive)
$pattern = '/[a-z0-9_\-\+\.]+@[a-z0-9\-]+\.[a-z]{2,4}(?:\.[a-z]{2})?/i';

// Extract all matches into the $matches array
preg_match_all($pattern, $text, $matches);

// The full list of matched emails will be in $matches[0]
$emails = $matches[0];

// Display the extracted emails
print_r($emails);
?>

OUTPUT: 
Array
(
    [0] => support@example.com
    [1] => admin@domain.net
    [2] => info123@sub.domain.org
)


ANSWER  : 42
<?php
$marks1 = array(360, 310, 310, 330, 313, 375, 456, 111, 256);
$marks2 = array(350, 340, 356, 330, 321);
$marks3 = array(630, 340, 570, 635, 434, 255, 298);

// Find the overall maximum and minimum marks
$max_marks = max(max($marks1), max($marks2), max($marks3));
$min_marks = min(min($marks1), min($marks2), min($marks3));

// Display the results
echo "Maximum marks : " . $max_marks . "\n";
echo "Minimum marks : " . $min_marks . "\n";
?>

OUTPUT :
Maximum marks : 635
Minimum marks : 111


ANSWER : 43 

<?php
function validatePassword($password) {
    $pattern = '/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[#?!@$%^&*\\-]).{8,}$/';

    if (preg_match($pattern, $password)) {
        echo "Password '{$password}' is valid.\n";
    } else {
        echo "Password '{$password}' is INVALID.\n";
    }
}

// Test cases
validatePassword("Password123!");   // Valid
validatePassword("pass123!");       // Invalid: too short / no uppercase
validatePassword("PASSWORD123!");   // Invalid: no lowercase
validatePassword("Password!");      // Invalid: no digit
validatePassword("Password123");    // Invalid: no special character
?>


OUTPUT : 

Password 'Password123!' is valid.
Password 'pass123!' is INVALID.
Password 'PASSWORD123!' is INVALID.
Password 'Password!' is INVALID.
Password 'Password123' is INVALID.


ANSWER : 44

<?php
// 1. Music Library (available songs)
$musicLibrary = [
    "Song A",
    "Song B",
    "Song C",
    "Song D"
];

// 2. User's Playlists Collection
$playlists = [];

// Create a new playlist
$playlistName = 'Favorites';
$playlists[$playlistName] = [];

// Add songs to the playlist
$playlists[$playlistName][] = "Song A";
$playlists[$playlistName][] = "Song C";
$playlists[$playlistName][] = "Song B";

// Display current playlist
echo "Current Playlist ({$playlistName}):\n";
echo implode(", ", $playlists[$playlistName]) . "\n\n";

// Remove a song ("Song C")
$playlists[$playlistName] = array_filter(
    $playlists[$playlistName],
    fn($song) => $song !== "Song C"
);
$playlists[$playlistName] = array_values($playlists[$playlistName]);

echo "After Removal of 'Song C':\n";
echo implode(", ", $playlists[$playlistName]) . "\n\n";

// Reorder playlist (swap positions)
$playlists[$playlistName] = ["Song B", "Song A"];

echo "After Reordering:\n";
echo implode(", ", $playlists[$playlistName]) . "\n\n";

// Display detailed playlist structure
echo "Final Playlist Structure:\n";
print_r($playlists);
?>

OUTPUT : 

Current Playlist (Favorites):
Song A, Song C, Song B

After Removal of 'Song C':
Song A, Song B

After Reordering:
Song B, Song A

Final Playlist Structure:
Array
(
    [Favorites] => Array
        (
            [0] => Song B
            [1] => Song A
        )
)

ANSWER :45

<?php
class ArrayDiffer {
    public static function recursiveDiff(array $firstArray, array $secondArray): array {
        $difference = [];

        foreach ($firstArray as $key => $value) {
            // Key exists in both?
            if (array_key_exists($key, $secondArray)) {
                if (is_array($value)) {
                    // Recursive case for nested arrays
                    $recursiveDiff = self::recursiveDiff($value, $secondArray[$key]);
                    if (count($recursiveDiff)) {
                        $difference[$key] = $recursiveDiff;
                    }
                } else {
                    // Compare scalar values
                    if ($value != $secondArray[$key]) {
                        $difference[$key] = $value;
                    }
                }
            } else {
                // Key missing entirely in second array
                $difference[$key] = $value;
            }
        }

        return $difference;
    }
}

// Sample arrays for comparison
$array1 = [
    'user' => [
        'id'    => 101,
        'name'  => 'Alice',
        'email' => 'alice@example.com'
    ],
    'products' => [
        ['id' => 1, 'qty' => 5],
        ['id' => 2, 'qty' => 3]
    ],
    'status' => 'active'
];

$array2 = [
    'user' => [
        'id'    => 101,
        'name'  => 'Alice',
        'email' => 'alice_new@example.com'
    ],
    'products' => [
        ['id' => 1, 'qty' => 5],
        ['id' => 2, 'qty' => 4]
    ],
    // 'status' key is missing here
];

// Compute difference
$diff = ArrayDiffer::recursiveDiff($array1, $array2);

// Display result
echo "Differences (array1 vs. array2):\n";
print_r($diff);


OUTPUT :
Differences (array1 vs. array2):
Array
(
    [user] => Array
        (
            [email] => alice@example.com
        )

    [products] => Array
        (
            [1] => Array
                (
                    [qty] => 3
                )
        )

    [status] => active
)


ANSWER : 46

<?php
// Sample arrays
$indexedArray = ["apple", "banana", "cherry", "date"];
$searchValue1 = "cherry";

$assocArray = [
    "first"  => "red",
    "second" => "green",
    "third"  => "blue"
];
$searchValue2 = "green";

// Using array_search()
$index1 = array_search($searchValue1, $indexedArray);
$index2 = array_search($searchValue2, $assocArray);

// Display results
echo "Searching '{$searchValue1}' in indexed array:\n";
if ($index1 !== false) {
    echo "Found at index: {$index1}\n";
} else {
    echo "'{$searchValue1}' not found.\n";
}

echo "\nSearching '{$searchValue2}' in associative array:\n";
if ($index2 !== false) {
    echo "Found at key: {$index2}\n";
} else {
    echo "'{$searchValue2}' not found.\n";
}
?>

OUTPUT : 

Searching 'cherry' in indexed array:
Found at index: 2

Searching 'green' in associative array:
Found at key: second


ANSWER : 47
<?php
$x = array(1, 2, 3, 4, 5);

// Remove the element at index 2 (value 3)
unset($x[2]);

// Reindex the array so numeric keys are orderly
$x = array_values($x);

// Display the array
print_r($x);
?>

OUTPUT : 
Array
(
    [0] => 1
    [1] => 2
    [2] => 4
    [3] => 5
)


ANSWER : 48

<?php
// Database connection parameters — adjust as needed
$host = 'localhost';
$user = 'root';
$pass = '';
$db   = 'test_db';

// Connect using mysqli
$mysqli = new mysqli($host, $user, $pass, $db);

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}

// Sample query to fetch users (assumes a 'users' table exists)
$query = "SELECT id, name, email FROM users";

// Execute the query
if ($result = $mysqli->query($query)) {

    // 1. Get the number of records in the result set
    $recordCount = $result->num_rows;  // Object-oriented way
    // Or alternatively: mysqli_num_rows($result); procedural method
    //:contentReference[oaicite:2]{index=2}

    echo "Number of records found: {$recordCount}\n\n";

    // 2. Fetch all rows into an array
    $rows = $result->fetch_all(MYSQLI_ASSOC);

    // 3. Display each row
    echo "Fetched Records:\n";
    foreach ($rows as $index => $row) {
        echo "[" . ($index + 1) . "] ID: {$row['id']}, Name: {$row['name']}, Email: {$row['email']}\n";
    }

    // 4. Use count() to demonstrate array counting
    echo "\nUsing count() on results array: " . count($rows) . " records retrieved.\n";
    //:contentReference[oaicite:3]{index=3}

    // Free result set
    $result->free();
} else {
    echo "Query failed: " . $mysqli->error;
}

$mysqli->close();
?>

OUTPUT :
Number of records found: 3

Fetched Records:
[1] ID: 1, Name: John Doe, Email: john@example.com
[2] ID: 2, Name: Jane Smith, Email: jane@example.net
[3] ID: 3, Name: Sam Brown, Email: sam@example.org

Using count() on results array: 3 records retrieved.


ANSWER : 49

<?php
// Sample data (could scale very large)
$players = [
    ['id'=>'P1','name'=>'Alice','points'=>25,'assists'=>7,'rebounds'=>10],
    ['id'=>'P2','name'=>'Bob','points'=>18,'assists'=>12,'rebounds'=>8],
    ['id'=>'P3','name'=>'Charlie','points'=>30,'assists'=>5,'rebounds'=>9],
];

// Compute performance index
foreach ($players as &$p) {
    $p['index'] = $p['points']*0.5 + $p['assists']*0.3 + $p['rebounds']*0.2;
}
unset($p);

// Average index
$total = array_sum(array_column($players, 'index'));
$avg = $total / count($players);

// Rank players by index
usort($players, fn($a,$b) => $b['index'] <=> $a['index']);

// Output
echo "Average Performance Index: " . round($avg,2) . "\n\n";
echo "Rankings:\n";
foreach ($players as $rank => $p) {
    echo ($rank+1) . ". {$p['name']} — Index: " . round($p['index'],2) . "\n";
}
?>

OUTPUT ": 

Average Performance Index: 14.53

Rankings:
1. Charlie — Index: 17.3
2. Alice — Index: 15.1
3. Bob — Index: 11.1


ANSWER : 50

<?php
// Original array of strings
$words = ["Hello", "World", "PHP", "Array", "MaP"];

// Convert all elements to lowercase
$lowercaseWords = array_map('strtolower', $words);

// Convert all elements to uppercase
$uppercaseWords = array_map('strtoupper', $words);

// Display the results
echo "Original Array:\n";
print_r($words);

echo "\nLowercase Array:\n";
print_r($lowercaseWords);

echo "\nUppercase Array:\n";
print_r($uppercaseWords);
?>


OUTPUT : 
Original Array:
Array
(
    [0] => Hello
    [1] => World
    [2] => PHP
    [3] => Array
    [4] => MaP
)

Lowercase Array:
Array
(
    [0] => hello
    [1] => world
    [2] => php
    [3] => array
    [4] => map
)

Uppercase Array:
Array
(
    [0] => HELLO
    [1] => WORLD
    [2] => PHP
    [3] => ARRAY
    [4] => MAP
)

ANSWER : 51

array_shift()

Function: Removes the first element from an array and returns it.

Effect: Shortens the array by one and re-indexes all numeric keys starting from zero.
It also resets the array’s internal pointer.

PHP
codeguage.com

Example:

$array = [1, 2, 3, 4, 5];
$first = array_shift($array);
// $first == 1
// $array == [2, 3, 4, 5]

array_unshift()

Function: Adds one or more elements to the beginning of an array.

Effect: Prepends the elements in the order given and re-indexes all numeric keys. Resets the internal pointer. Returns the new total number of elements.

Reintech
PHP
codeguage.com

Example:

$array = [1, 2, 3];
$newLength = array_unshift($array, 0, -1);
// $newLength == 5
// $array == [-1, 0, 1, 2, 3]

ANSWER : 52


<?php
// --- Stack Example using SplStack ---
$stack = new SplStack();
$stack->push("first");
$stack->push("second");
$stack->push("third");
echo "Popped from stack: " . $stack->pop() . "\n";  // Expected: third

// --- Queue Example using SplQueue ---
$queue = new SplQueue();
$queue->enqueue("first");
$queue->enqueue("second");
$queue->enqueue("third");
echo "Dequeued from queue: " . $queue->dequeue() . "\n";  // Expected: first
?>

OUTPUT : 

Popped from stack: third
Dequeued from queue: first


ANSWER : 53
<?php
// Initial numeric array
$x = [10, 20, 30, 40, 50];

echo "Original array:\n";
print_r($x);

// Remove last element using array_pop()
$last = array_pop($x);
echo "\nAfter array_pop() (removed last element '{$last}'):\n";
print_r($x);

// Reset array
$x = [10, 20, 30, 40, 50];

// Remove first element using array_shift()
$first = array_shift($x);
echo "\nAfter array_shift() (removed first element '{$first}'):\n";
print_r($x);
?>

OUTPUT : 

Original array:
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
    [4] => 50
)

After array_pop() (removed last element '50'):
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
)

After array_shift() (removed first element '10'):
Array
(
    [0] => 20
    [1] => 30
    [2] => 40
    [3] => 50
)

ANSWER : 54

<?php
// Initialize an empty booking queue
$queue = [];

// Customers join the booking queue
array_push($queue, "Alice");
array_push($queue, "Bob");
array_push($queue, "Charlie");
array_push($queue, "Diana");

echo "Initial Queue:\n";
print_r($queue);

// Process bookings (FIFO)
echo "\nProcessing Bookings:\n";
while (!empty($queue)) {
    $customer = array_shift($queue); // Remove first customer in queue
    echo "Ticket booked for: $customer\n";
    echo "Remaining Queue: ";
    print_r($queue);
    echo "\n";
}
?>

OUTPUT : 

Initial Queue:
Array
(
    [0] => Alice
    [1] => Bob
    [2] => Charlie
    [3] => Diana
)

Processing Bookings:
Ticket booked for: Alice
Remaining Queue: Array
(
    [0] => Bob
    [1] => Charlie
    [2] => Diana
)

Ticket booked for: Bob
Remaining Queue: Array
(
    [0] => Charlie
    [1] => Diana
)<?php
// Input string
$string = "HELLO";

// Convert string to an array of characters
$chars = str_split($string);

// Initialize empty stack
$stack = [];

// Push each character onto the stack
foreach ($chars as $ch) {
    array_push($stack, $ch);
}

// Pop characters from stack to form reversed string
$reversed = "";
while (!empty($stack)) {
    $reversed .= array_pop($stack);
}

// Display results
echo "Original String: $string\n";
echo "Reversed String: $reversed\n";
?>

OUTPUT : 

Original String: HELLO
Reversed String: OLLEH



Ticket booked for: Charlie
Remaining Queue: Array
(
    [0] => Diana
)

Ticket booked for: Diana
Remaining Queue: Array
(
)

ANSWER : 55

<?php
// Input string
$string = "HELLO";

// Convert string to an array of characters
$chars = str_split($string);

// Initialize empty stack
$stack = [];

// Push each character onto the stack
foreach ($chars as $ch) {
    array_push($stack, $ch);
}

// Pop characters from stack to form reversed string
$reversed = "";
while (!empty($stack)) {
    $reversed .= array_pop($stack);
}

// Display results
echo "Original String: $string\n";
echo "Reversed String: $reversed\n";
?>

OUTPUT : 
Original String: HELLO
Reversed String: OLLEH


ANSWER : 56

<?php
$fruits = ["Banana", "apple", "Orange", "Mango"];

// Simple sort
sort($fruits);
print_r($fruits);

// Reverse sort
rsort($fruits);
print_r($fruits);

// Sort by values (preserve keys)
$fruits_assoc = ["a"=>"Banana", "b"=>"apple", "c"=>"Orange"];
asort($fruits_assoc);
print_r($fruits_assoc);

// Sort by keys
ksort($fruits_assoc);
print_r($fruits_assoc);

// Natural order sort
$files = ["img12.png", "img10.png", "img2.png"];
natsort($files);
print_r($files);
?>

ANSWER : 57

<?php
// Example 1: preg_match
$text = "Hello World 2025";
if (preg_match("/World/", $text)) {
    echo "Match found!\n";
}

// Example 2: preg_match_all
preg_match_all("/\d+/", $text, $matches);
print_r($matches);

// Example 3: preg_replace
$newText = preg_replace("/World/", "PHP", $text);
echo $newText . "\n";  // Output: Hello PHP 2025

// Example 4: preg_split
$parts = preg_split("/\s+/", $text);
print_r($parts);
?>

OUTPUT : 

Match found!
Array
(
    [0] => Array
        (
            [0] => 2025
        )
)
Hello PHP 2025
Array
(
    [0] => Hello
    [1] => World
    [2] => 2025
)

ANSWER : 58
<?php
// Input string with email addresses
$text = "Please contact us at support@example.com, sales@company.org, 
         or feedback123@gmail.com for more information.";

// Regular expression pattern for emails
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/";

// Extract all emails
preg_match_all($pattern, $text, $matches);

// Display result
echo "Extracted Email Addresses:\n";
print_r($matches[0]);
?>

OUTPUT : 

Extracted Email Addresses:
Array
(
    [0] => support@example.com
    [1] => sales@company.org
    [2] => feedback123@gmail.com
)


ANSWER : 59 

<?php
// Function to calculate average
function calculateAverage($numbers) {
    if (count($numbers) === 0) {
        return 0; // Avoid division by zero
    }
    $sum = array_sum($numbers);   // Add all numbers
    $count = count($numbers);     // Get total elements
    return $sum / $count;         // Average formula
}

// Example usage
$nums = array(10, 20, 30, 40, 50);
$average = calculateAverage($nums);

echo "Numbers: " . implode(", ", $nums) . "\n";
echo "Average: " . $average;
?>


OUTPUT : 

Numbers: 10, 20, 30, 40, 50
Average: 30


ANSWER : 60 

<?php
// Function to search value in associative array
function searchValueInAssocArray($array, $value) {
    // Use array_search to find the key
    $key = array_search($value, $array, true);
    
    if ($key !== false) {
        return "Value '$value' found at key '$key'.";
    } else {
        return "Value '$value' not found in the array.";
    }
}

// Example associative array
$students = array(
    "S001" => "Alice",
    "S002" => "Bob",
    "S003" => "Charlie",
    "S004" => "David"
);

// Test cases
echo searchValueInAssocArray($students, "Charlie") . "\n";
echo searchValueInAssocArray($students, "Eve") . "\n";
?>


OUTPUT : 

Value 'Charlie' found at key 'S003'.
Value 'Eve' not found in the array.


ANSWER : 61

Steps to Delete an Element from an Array in PHP

Identify the array and the element you want to remove.
Example:

$arr = array(1, 2, 3, 4, 5);


Choose a method based on your need:

Using unset() → removes element but keeps the keys as they are.

unset($arr[2]);  // Removes element at index 2 (value 3)


Result:

Array ( [0] => 1 [1] => 2 [3] => 4 [4] => 5 )


Using array_splice() → removes element and reindexes the array.

array_splice($arr, 2, 1); // Remove 1 element at index 2


Result:

Array ( [0] => 1 [1] => 2 [2] => 4 [3] => 5 )


Using array_diff() → remove by value instead of index.

$arr = array_diff($arr, [3]); // Removes all 3s


Result:

Array ( [0] => 1 [1] => 2 [3] => 4 [4] => 5 )


(Optional) Reindex array with array_values() if needed.

$arr = array_values($arr);

ANSWER : 62

<?php
// Sample values
$values = array(1.65, 1.65, -1.54);

echo "Original Values and Rounded Results (1 decimal place): <br>";

foreach ($values as $val) {
    $rounded = round($val, 1);  // Round to 1 decimal digit
    echo "Value: $val → Rounded: $rounded <br>";
}
?>


OUTPUT : 

Original Values and Rounded Results (1 decimal place):
Value: 1.65 → Rounded: 1.7
Value: 1.65 → Rounded: 1.7
Value: -1.54 → Rounded: -1.5


ANSWER : 63

<?php
// Function to find sum of even numbers
function sumEvenNumbers($numbers) {
    $sum = 0;
    foreach ($numbers as $num) {
        if ($num % 2 == 0) {  // Check if number is even
            $sum += $num;
        }
    }
    return $sum;
}

// Example usage
$arr = array(1, 2, 3, 4, 5, 6, 10);
echo "Array: " . implode(", ", $arr) . "<br>";
echo "Sum of even numbers: " . sumEvenNumbers($arr);
?>


OUTPUT : 

Array: 1, 2, 3, 4, 5, 6, 10
Sum of even numbers: 22


ANSWER : 64

<?php
// Historical sales data (in thousands of dollars)
$sales = array(100, 120, 140, 160, 200); // past 5 months

echo "<h3>📊 Historical Sales Data</h3>";
echo implode(", ", $sales) . "<br>";

// Step 1: Calculate monthly growth rates
$growthRates = array();
for ($i = 1; $i < count($sales); $i++) {
    $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100;
    $growthRates[] = round($growth, 2);
}

// Display growth rates
echo "<h3>📈 Monthly Growth Rates (%)</h3>";
echo implode("%, ", $growthRates) . "%<br>";

// Step 2: Calculate average growth rate
$avgGrowth = array_sum($growthRates) / count($growthRates);
echo "<h3>📌 Average Growth Rate: " . round($avgGrowth, 2) . "%</h3>";

// Step 3: Forecast future sales (next 3 months)
$futureSales = array();
$lastSale = end($sales);

for ($i = 1; $i <= 3; $i++) {
    $forecast = $lastSale * (1 + ($avgGrowth / 100));
    $futureSales[] = round($forecast, 2);
    $lastSale = $forecast; // update for next forecast
}

// Display future sales forecast
echo "<h3>🔮 Forecasted Sales (Next 3 Months)</h3>";
echo implode(", ", $futureSales);
?>


OUTPUT : 

📊 Historical Sales Data
100, 120, 140, 160, 200

📈 Monthly Growth Rates (%)
20%, 16.67%, 14.29%, 25%

📌 Average Growth Rate: 19.49%

🔮 Forecasted Sales (Next 3 Months)
239.49, 286.08, 341.93

ANSWER : 65

<?php
// Main string
$mainString = "Welcome to PHP programming!";

// Substring to search
$search = "PHP";

// Check if substring exists
if (strpos($mainString, $search) !== false) {
    echo "The string '<b>$search</b>' was found in '<b>$mainString</b>'.";
} else {
    echo "The string '<b>$search</b>' was NOT found in '<b>$mainString</b>'.";
}
?>


OUTPUT : 

The string 'PHP' was found in 'Welcome to PHP programming!'.


ANSWER : 66

1. count()

Definition: Returns the number of elements in an array or properties in an object.

Syntax:

count($array, $mode);


Parameters:

$array: The array to count.

$mode (optional): If set to COUNT_RECURSIVE, it counts elements recursively in multidimensional arrays.

✅ 2. sizeof()

Definition: Alias of count(). It behaves the same as count() and has no difference in functionality.

Syntax:

sizeof($array, $mode);


ANSWER : 67

<?php
// Input sentence
$sentence = "PHP is great, and PHP is powerful. I love PHP!";

// Step 1: Tokenize sentence into words using regex
$words = preg_split("/[^a-zA-Z]+/", strtolower($sentence), -1, PREG_SPLIT_NO_EMPTY);

// Step 2: Count occurrences of each word
$wordCount = array_count_values($words);

// Step 3: Display results
echo "<h3>Word Occurrences:</h3>";
foreach ($wordCount as $word => $count) {
    echo "$word : $count <br>";
}
?>


OUTPUT : 

Word Occurrences:
php : 3
is : 2
great : 1
and : 1
powerful : 1
i : 1
love : 1


ANSWER: 68

<?php
try {
    // Example values
    $num = 10;
    $den = 0;

    // Attempt division
    if ($den == 0) {
        throw new DivisionByZeroError("Cannot divide by zero!");
    }

    $result = $num / $den;
    echo "Result: $result";

} catch (DivisionByZeroError $e) {
    echo "Error: " . $e->getMessage();
}
?>


OUTPUT : 

Error: Cannot divide by zero!


ANSWER : 69

<?php
function changeCase($arr) {
    // Convert all values to lowercase
    $lower = array_map('strtolower', $arr);
    echo "Values are in lower case.<br>";
    print_r($lower);
    echo "<br><br>";

    // Convert all values to uppercase
    $upper = array_map('strtoupper', $arr);
    echo "Values are in upper case.<br>";
    print_r($upper);
}

// Sample array
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');

// Call the function
changeCase($Color);
?>


OUTPUT : 

Values are in lower case.
Array ( [A] => blue [B] => green [c] => red )

Values are in upper case.
Array ( [A] => BLUE [B] => GREEN [c] => RED )


ANSWER : 70

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $input = trim($_POST["numbers"]);

    // Convert the string into an array (split by comma or space)
    $numbers = preg_split('/[\s,]+/', $input);

    // Convert to integers
    $numbers = array_map('intval', $numbers);

    echo "<h3>Stored Numbers in Array:</h3>";
    echo "<pre>";
    print_r($numbers);
    echo "</pre>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Store Numbers in Array</title>
</head>
<body>
    <h2>Enter a sequence of numbers (comma or space separated):</h2>
    <form method="post">
        <input type="text" name="numbers" placeholder="e.g. 10, 20, 30, 40">
        <input type="submit" value="Submit">
    </form>
</body>
</html>

OUTPUT : 

Stored Numbers in Array:
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
    [4] => 50
)

ANSWER : 71

| Mode     | Description                                                                                                    |
| -------- | -------------------------------------------------------------------------------------------------------------- |
| **`r`**  | Open file for **read only**. Pointer starts at the **beginning** of the file.                                  |
| **`r+`** | Open file for **read and write**. Pointer starts at the **beginning** of the file.                             |
| **`w`**  | Open file for **write only**. Erases file content (if file exists) or creates a new file.                      |
| **`w+`** | Open file for **read and write**. Erases content (if file exists) or creates a new file.                       |
| **`a`**  | Open file for **write only**. Pointer at the **end** of the file. Creates file if it does not exist.           |
| **`a+`** | Open file for **read and write**. Pointer at the **end** of the file. Creates file if it does not exist.       |
| **`x`**  | Create and open file for **write only**. Returns `FALSE` and error if file already exists.                     |
| **`x+`** | Create and open file for **read and write**. Returns `FALSE` and error if file already exists.                 |
| **`c`**  | Open file for **write only**. Creates the file if it doesn’t exist. Doesn’t truncate (clear) existing content. |
| **`c+`** | Open file for **read and write**. Creates file if it doesn’t exist. Doesn’t truncate existing content.         |


ANSWER : 72 

<?php
// Start session
session_start();

// (i) Register session variables (replacement for session_register)
$_SESSION['username'] = "Jenitha";
$_SESSION['role'] = "Student";

echo "<h3>Session Variables Registered:</h3>";
print_r($_SESSION);

// (ii) Unset all session variables
session_unset();
echo "<h3>After session_unset():</h3>";
print_r($_SESSION);

// Re-register again for destroy demo
$_SESSION['username'] = "Jenitha";
$_SESSION['role'] = "Student";

// (iii) Destroy the session
session_destroy();

echo "<h3>Session destroyed.</h3>";
?>

OUTPUT : 

Session Variables Registered:
Array ( [username] => Jenitha [role] => Student )

After session_unset():
Array ( )

Session destroyed.

ANSWER : 73

<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_FILES['file'])) {
        $fileName = $_FILES['file']['name'];
        $fileType = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));

        // Check if uploaded file is jpg or png
        if ($fileType == "jpg" || $fileType == "jpeg" || $fileType == "png") {
            echo "<h3>✅ File uploaded successfully: $fileName</h3>";
        } else {
            echo "<h3 style='color:red;'>❌ Error: Only JPG or PNG files are allowed.</h3>";
        }
    }
}
?>

<!-- HTML Form -->
<form method="post" enctype="multipart/form-data">
    <label>Select a file to upload (JPG/PNG only):</label><br>
    <input type="file" name="file" required>
    <input type="submit" value="Upload">
</form>

OUTPUT : 

If you upload photo.jpg →
✅ File uploaded successfully: photo.jpg

If you upload doc.pdf →
❌ Error: Only JPG or PNG files are allowed.

ANSWER : 74

<?php
// Writing to file
$file = fopen("data.txt", "w");
fwrite($file, "PHP is awesome!\n");
fwrite($file, "File handling is powerful.\n");
fclose($file);

// Reading from file
$file = fopen("data.txt", "r");
echo "<h3>File Content:</h3>";
while(!feof($file)) {   // feof = end of file
    echo fgets($file) . "<br>";
}
fclose($file);
?>

OUTPUT : 

File Content:
PHP is awesome!
File handling is powerful.


ANSWER : 75

<?php
function appendLineToFile($filename, $newLine) {
    // Add a newline character to the content
    $newLineWithBreak = $newLine . PHP_EOL;

    // Append the new line to the file
    if (file_put_contents($filename, $newLineWithBreak, FILE_APPEND)) {
        echo "New line appended successfully to '$filename'.";
    } else {
        echo "Error: Could not write to file '$filename'.";
    }
}

// Example usage
$filename = "example.txt";
$newLine = "This is a new line added to the file.";

// Call the function
appendLineToFile($filename, $newLine);
?>


OUTPUT : 

New line appended successfully to 'example.txt'.


ANSWER : 76

<?php
// User's birthday (Month-Day format)
$birthdayMonthDay = "08-25";  // Example: August 25

// Get current date
$today = new DateTime();

// Get birthday for this year
$birthday = new DateTime(date("Y") . "-" . $birthdayMonthDay);

// If birthday already passed this year, use next year
if ($birthday < $today) {
    $birthday->modify("+1 year");
}

// Calculate difference
$interval = $today->diff($birthday);

echo "Today: " . $today->format("Y-m-d") . "<br>";
echo "Next Birthday: " . $birthday->format("Y-m-d") . "<br>";
echo "Days until birthday: " . $interval->days;
?>

OUTPUT : 

Today: 2025-08-18
Next Birthday: 2025-08-25
Days until birthday: 7

ANSWER: 77

1. Host/Domain Functions

These functions provide information about hostnames and domains.

Function	Description	Example
gethostbyname()	Returns the IPv4 address for a hostname	gethostbyname("example.com") → "93.184.216.34"
gethostbynamel()	Returns all IP addresses for a hostname as an array	gethostbynamel("example.com") → ["93.184.216.34"]
gethostbyaddr()	Returns the hostname for an IP address	gethostbyaddr("8.8.8.8") → "dns.google"
dns_check_record() / checkdnsrr()	Checks DNS records for a domain	checkdnsrr("example.com", "MX") → true/false
🔹 2. IP Address Functions

These functions handle validation or conversion of IP addresses.

Function	Description	Example
ip2long()	Converts IPv4 address to a long integer	ip2long("127.0.0.1") → 2130706433
long2ip()	Converts long integer back to IPv4 address	long2ip(2130706433) → "127.0.0.1"
inet_pton()	Converts IP (IPv4/IPv6) to packed format	inet_pton("127.0.0.1")
inet_ntop()	Converts packed format back to human-readable IP	inet_ntop($packed)
filter_var($ip, FILTER_VALIDATE_IP)	Validates if a string is a valid IP	filter_var("192.168.1.1", FILTER_VALIDATE_IP)
🔹 3. Client/Server Network Information

Functions to retrieve information about the server or client.

Function	Description	Example
$_SERVER['REMOTE_ADDR']	Client IP address	"192.168.1.5"
$_SERVER['SERVER_ADDR']	Server IP address	"127.0.0.1"
$_SERVER['HTTP_HOST']	Current domain name	"localhost"
$_SERVER['SERVER_NAME']	Server host name	"localhost"
🔹 4. Socket Functions

Used for low-level network communication.

Function	Description
socket_create()	Creates a socket
socket_connect()	Connects to a remote socket
socket_bind()	Binds a socket to a local address and port
socket_listen()	Listens for incoming connections
socket_accept()	Accepts an incoming connection
socket_read() / socket_write()	Reads from/writes to a socket 

ANSWER : 78

<?php
// Step 1: Set a cookie (expires in 1 hour)
setcookie("user", "Jenitha", time() + 3600, "/");

// Step 2: Read the cookie
if(isset($_COOKIE["user"])) {
    echo "Cookie 'user' is set. Value: " . $_COOKIE["user"];
} else {
    echo "Cookie 'user' is not set.";
}
?>

OUTPUT : 

Cookie 'user' is set. Value: Jenitha


ANSWER : 79 

<?php
// File names
$file1 = "file1.txt";
$file2 = "file2.txt";
$destinationFile = "combined.txt";

// Step 1: Read content from first file
$content1 = file_get_contents($file1);

// Step 2: Read content from second file
$content2 = file_get_contents($file2);

// Step 3: Combine the contents
$combinedContent = $content1 . PHP_EOL . $content2;

// Step 4: Write combined content into destination file
if(file_put_contents($destinationFile, $combinedContent)) {
    echo "Files appended successfully into '$destinationFile'.";
} else {
    echo "Error: Could not write to '$destinationFile'.";
}
?>


ANSWER : 80

<?php
// Set a test cookie
// Parameters: name, value, expiration time (1 hour from now), path
setcookie("test_cookie", "This is a test", time() + 3600, "/");

// Check if cookie is set
if(isset($_COOKIE["test_cookie"])) {
    echo "Test cookie is set. Value: " . $_COOKIE["test_cookie"];
} else {
    echo "Test cookie has not been set yet.";
}
?>

OUTPUT : 

Test cookie is set. Value: This is a test

ANSWER : 81

<?php
session_start();

// Hardcoded credentials
$admin_user = "admin";
$admin_pass = "admin123";

// Handle Logout
if (isset($_GET['action']) && $_GET['action'] === 'logout') {
    session_unset();
    session_destroy();
    header("Location: admin.php");
    exit();
}

// Handle Login
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST["username"];
    $password = $_POST["password"];

    if ($username === $admin_user && $password === $admin_pass) {
        $_SESSION["admin_logged_in"] = true;
        $_SESSION["admin_user"] = $username;
        header("Location: admin.php");
        exit();
    } else {
        $error = "Invalid username or password!";
    }
}

// If admin is logged in, show dashboard
if (isset($_SESSION["admin_logged_in"]) && $_SESSION["admin_logged_in"] === true) {
    echo "<h2>Welcome, " . $_SESSION["admin_user"] . "!</h2>";
    echo "<p>You are logged in as Admin.</p>";
    echo '<a href="admin.php?action=logout">Logout</a>';
} else {
    // Show login form
    ?>
    <h2>Admin Login</h2>
    <form method="post" action="">
        Username: <input type="text" name="username" required><br><br>
        Password: <input type="password" name="password" required><br><br>
        <input type="submit" value="Login">
    </form>
    <?php
    if(isset($error)){
        echo "<p style='color:red;'>$error</p>";
    }
}
?>


ANSWER : 82

<?php
ob_start();

// Basic cookie
setcookie("simple_cookie", "Hello World", time() + 3600);

// Cookie with path
setcookie("path_cookie", "Path Example", time() + 3600, "/test/");

// Cookie with domain
setcookie("domain_cookie", "Domain Example", time() + 3600, "/", ".example.com");

// Secure cookie
setcookie("secure_cookie", "Secure Example", time() + 3600, "/", "", true);

// HttpOnly cookie
setcookie("httponly_cookie", "HttpOnly Example", time() + 3600, "/", "", false, true);

// SameSite cookie (PHP 7.3+)
setcookie("samesite_cookie", "SameSite Example", [
    'expires' => time() + 3600,
    'path' => '/',
    'domain' => '',
    'secure' => false,
    'httponly' => true,
    'samesite' => 'Strict'
]);

echo "<h3>Cookies have been set!</h3>";
echo "<h4>Currently available cookies:</h4>";
echo "<pre>";
print_r($_COOKIE);
echo "</pre>";

ob_end_flush();
?>


OUTPUT : 

Cookies have been set!

Currently available cookies:
Array
(
    // Usually empty on first load because cookies become available on the next request
)


ANSWER : 83

<?php
$result = "";
$domain = "";

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // Validate email
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $result = "✅ Valid Email";

        // Extract domain
        $parts = explode("@", $email);
        $domain = $parts[1];
    } else {
        $result = "❌ Invalid Email";
    }
}
?>

<h2>Email Validation Form</h2>
<form method="post">
    Enter Email: <input type="text" name="email" required>
    <input type="submit" value="Validate">
</form>

<?php
if (!empty($result)) {
    echo "<h3>Result: $result</h3>";
    if (!empty($domain)) {
        echo "<h4>Domain Name: $domain</h4>";
    }
}
?>

OUTPUT : 

Result: ✅ Valid Email
Domain Name: example.com


ANSWER : 84

<?php
// Start the session
session_start();

// Step 1: Set session values
$_SESSION['username'] = "Jenitha";
$_SESSION['role'] = "Admin";
$_SESSION['email'] = "jenitha@example.com";

// Display current session data
echo "<h3>Current Session Data:</h3>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Step 2: Remove a specific session variable
unset($_SESSION['email']);
echo "<h3>After unsetting 'email':</h3>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Step 3: Destroy the entire session
session_destroy();
echo "<h3>After destroying the session:</h3>";
echo "<pre>";
print_r($_SESSION); // This will still show data in this script until page reload
echo "</pre>";
?>

OUTPUT : 

Current Session Data:
Array
(
    [username] => Jenitha
    [role] => Admin
    [email] => jenitha@example.com
)

After unsetting 'email':
Array
(
    [username] => Jenitha
    [role] => Admin
)

After destroying the session:
Array
(
    [username] => Jenitha
    [role] => Admin
)

ANSWER : 85

Steps to Get File Name from Path in PHP
1️⃣ Using basename() Function

The simplest way to get the file name from a path.

$path = "/var/www/html/example/file.txt";
$filename = basename($path);

echo $filename; // Output: file.txt


Optional: You can also remove the file extension:

$filename_without_ext = basename($path, ".txt");
echo $filename_without_ext; // Output: file

2️⃣ Using pathinfo() Function

Provides more detailed information about the path.

$path = "/var/www/html/example/file.txt";
$file_info = pathinfo($path);

echo "File Name: " . $file_info['basename'] . "<br>";
echo "File Name without Extension: " . $file_info['filename'] . "<br>";
echo "Extension: " . $file_info['extension'] . "<br>";


Output:

File Name: file.txt
File Name without Extension: file
Extension: txt


ANSWER : 86

<?php
$filename = "example.txt";

// 1. Create or open file for writing
$file = fopen($filename, "w") or die("Unable to open file!");

// 2. Write data to the file
fwrite($file, "Hello, PHP File Handling!\n");
fwrite($file, "This is a second line.\n");

// 3. Close the file
fclose($file);

// 4. Read entire file using fread
$file = fopen($filename, "r") or die("Unable to open file!");
$content = fread($file, filesize($filename));
fclose($file);
echo "<h3>Content of the file (using fread):</h3>";
echo "<pre>$content</pre>";

// 5. Read file line by line using fgets
$file = fopen($filename, "r");
echo "<h3>Reading line by line (using fgets):</h3>";
while(!feof($file)) {
    $line = fgets($file);
    if ($line) echo $line . "<br>";
}
fclose($file);

// 6. Append data to file using file_put_contents
file_put_contents($filename, "Appending a new line using file_put_contents.\n", FILE_APPEND);

// 7. Read file using file_get_contents
echo "<h3>File content after appending:</h3>";
echo "<pre>" . file_get_contents($filename) . "</pre>";

// 8. Delete the file
// unlink($filename); // Uncomment to delete the file
?>


OUTPUT : 

Output after running above code:

Content of the file (using fread):

Hello, PHP File Handling!
This is a second line.


Reading line by line (using fgets):

Hello, PHP File Handling!
This is a second line.


File content after appending:

Hello, PHP File Handling!
This is a second line.
Appending a new line using file_put_contents.

ANSWER : 87

<?php
session_start();

// Hardcoded admin credentials
$admin_user = "admin";
$admin_pass = "admin123";

// Handle logout
if (isset($_GET['action']) && $_GET['action'] === 'logout') {
    session_unset();
    session_destroy();
    header("Location: admin.php");
    exit();
}

// Handle login form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST["username"];
    $password = $_POST["password"];

    if ($username === $admin_user && $password === $admin_pass) {
        $_SESSION["admin_logged_in"] = true;
        $_SESSION["admin_user"] = $username;
        header("Location: admin.php");
        exit();
    } else {
        $error = "Invalid username or password!";
    }
}

// If logged in, show dashboard
if (isset($_SESSION["admin_logged_in"]) && $_SESSION["admin_logged_in"] === true) {
    echo "<h2>Welcome, " . $_SESSION["admin_user"] . "!</h2>";
    echo "<p>You are logged in as Admin.</p>";
    echo '<a href="admin.php?action=logout">Logout</a>';
} else {
    // Show login form
    ?>
    <h2>Admin Login</h2>
    <form method="post">
        Username: <input type="text" name="username" required><br><br>
        Password: <input type="password" name="password" required><br><br>
        <input type="submit" value="Login">
    </form>
    <?php
    if(isset($error)){
        echo "<p style='color:red;'>$error</p>";
    }
}
?>

OUTPUT : 

Admin Login

Username: [__________]
Password: [__________]
[Login Button]

ANSWER : 88

<?php
// Set your birthday (month and day)
$birthday_month = 12; // December
$birthday_day = 25;   // 25th

// Get current date
$today = new DateTime();

// Create birthday date for this year
$birthday = new DateTime($today->format('Y') . "-$birthday_month-$birthday_day");

// If birthday already passed this year, set for next year
if ($birthday < $today) {
    $birthday->modify('+1 year');
}

// Calculate difference
$interval = $today->diff($birthday);
$days_remaining = $interval->days;

// Display result
echo "<h2>Birthday Countdown</h2>";
echo "Today: " . $today->format('Y-m-d') . "<br>";
echo "Next Birthday: " . $birthday->format('Y-m-d') . "<br>";
echo "<strong>Days Remaining: $days_remaining days</strong>";
?>

OUTPUT : 

Birthday Countdown
Today: 2025-08-18
Next Birthday: 2025-12-25
Days Remaining: 129 days


ANSWER : 89

<?php
$filename = "example.txt";

// Check if file exists
if(file_exists($filename)) {

    // Open the file in read mode
    $file = fopen($filename, "r") or die("Unable to open file!");

    echo "<h3>Reading file line by line using fgets():</h3>";
    // Read file line by line until end-of-file
    while(!feof($file)) {
        $line = fgets($file);
        if($line) {
            echo $line . "<br>";
        }
    }

    // Close the file
    fclose($file);

    // Alternatively, read the entire file at once using fread
    $file = fopen($filename, "r") or die("Unable to open file!");
    $content = fread($file, filesize($filename));
    fclose($file);

    echo "<h3>Reading entire file using fread():</h3>";
    echo "<pre>$content</pre>";

} else {
    echo "File '$filename' does not exist.";
}
?>


OUTPUT :

Reading file line by line using fgets():
Hello, PHP!
This is a sample file.
File operations are easy.

Reading entire file using fread():
Hello, PHP!
This is a sample file.
File operations are easy.


ANSWER : 90

<?php
$filename = "sample.txt";

// Check if file exists
if(file_exists($filename)) {

    // Open the file in read mode
    $file = fopen($filename, "r") or die("Unable to open file!");

    // Get the size of the file
    $filesize = filesize($filename);

    // Read entire file content
    $content = fread($file, $filesize);

    // Close the file
    fclose($file);

    // Display file content
    echo "<h3>Contents of '$filename':</h3>";
    echo "<pre>$content</pre>";

} else {
    echo "File '$filename' does not exist.";
}
?>


OUTPUT : 

Contents of 'sample.txt':
Hello, PHP!
Welcome to file handling.


ANSWER : 91

<?php
// Start the session
session_start();

// Step 1: Set session values if not already set
if(!isset($_SESSION['username'])) {
    $_SESSION['username'] = "Jenitha";
    $_SESSION['role'] = "Admin";
    $_SESSION['login_time'] = date("Y-m-d H:i:s");
    echo "<h3>Session has been created and values are set!</h3>";
} else {
    echo "<h3>Session already exists.</h3>";
}

// Step 2: Display current session data
echo "<h4>Current Session Data:</h4>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Step 3: Update a session variable
$_SESSION['role'] = "Super Admin";
echo "<h4>Session data after updating 'role':</h4>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Step 4: Remove a specific session variable
unset($_SESSION['login_time']);
echo "<h4>Session data after removing 'login_time':</h4>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Step 5: Destroy the session
if(isset($_GET['destroy'])) {
    session_destroy();
    echo "<h3>Session destroyed. Reload the page to see effect.</h3>";
}
?>

<!-- Link to destroy session -->
<p><a href="?destroy=1">Click here to destroy the session</a></p>

OUTPUT : 

Session destroyed. Reload the page to see effect.

ANSWER : 92
<?php
// Check if the "visit_count" cookie exists
if (isset($_COOKIE['visit_count'])) {
    // Increment the count
    $visit_count = $_COOKIE['visit_count'] + 1;
} else {
    // First visit
    $visit_count = 1;
}

// Set/update the cookie to expire in 30 days
setcookie('visit_count', $visit_count, time() + (30 * 24 * 60 * 60));

// Display the visit count
echo "<h2>Welcome!</h2>";
echo "<p>You have visited this page <strong>$visit_count</strong> times.</p>";
?>

OUTPUT : 

Welcome!
You have visited this page 3 times.


ANSWER : 94
| Mode   | Description                                                                                     | Example Use                                 |
| ------ | ----------------------------------------------------------------------------------------------- | ------------------------------------------- |
| `"r"`  | Open for **reading only**. File must exist. Pointer at start of file.                           | Reading a text file.                        |
| `"r+"` | Open for **reading and writing**. File must exist. Pointer at start of file.                    | Updating content at beginning.              |
| `"w"`  | Open for **writing only**. **Truncates file to zero length**. Creates file if it doesn’t exist. | Overwriting a file completely.              |
| `"w+"` | Open for **reading and writing**. Truncates file if exists. Creates file if not.                | Reading and rewriting a file from scratch.  |
| `"a"`  | Open for **writing only**. Pointer at **end of file**. Creates file if not exists.              | Appending new data to file.                 |
| `"a+"` | Open for **reading and writing**. Pointer at end. Creates file if not exists.                   | Reading file and appending data.            |
| `"x"`  | Create **new file for writing only**. Fails if file exists.                                     | Creating a file safely without overwriting. |
| `"x+"` | Create new file for **reading and writing**. Fails if file exists.                              | Safely create and read/write new file.      |
| `"b"`  | Binary mode (add `"b"` to other modes, e.g., `"rb"`)                                            | Useful for images, PDFs, or binary files.   |
| `"t"`  | Text mode (default in Windows)                                                                  | Mainly for Windows text files.              |



ANSWER : 95

PHP sessions allow a website to store user-specific data on the server, enabling persistent state across multiple pages in an otherwise stateless HTTP environment. By starting a session with session_start(), data can be stored in $_SESSION variables, retrieved, updated, or destroyed as needed. A common application is a shopping cart, where items, quantities, and selections are stored in the session so that as a user browses products across different pages, their cart remains consistent. For example, when a user adds a product, it is stored in $_SESSION['cart']; this data can be updated or displayed on any page until the session ends or the user checks out, ensuring a secure, persistent, and user-specific cart experience without relying solely on cookies.

ANSWER : 96 
<?php
// Start the session
session_start();

// Register a session variable
$_SESSION['username'] = "Jenitha";

// Accessing the session variable
echo "Welcome, " . $_SESSION['username'];
?>


ANSWER : 97

| Function                  | Effect                                             |
| ------------------------- | -------------------------------------------------- |
| `session_start()`         | Begins or resumes a session; must be first.        |
| `session_destroy()`       | Deletes all session data on the server.            |
| `session_unset()`         | Clears session variables but keeps session active. |
| `session_id()`            | Get or set session ID.                             |
| `session_name()`          | Get or set session name.                           |
| `session_write_close()`   | Saves session and unlocks session file.            |
| `session_save_path()`     | Get or set the path for session storage.           |
| `session_regenerate_id()` | Creates new session ID to prevent fixation.        |


ANSWER: 98

<?php
session_start();

// Dummy admin credentials
$admin_user = "admin";
$admin_pass = "12345";

// Handle logout
if (isset($_GET['action']) && $_GET['action'] == "logout") {
    session_unset();
    session_destroy();
    header("Location: ".$_SERVER['PHP_SELF']);
    exit();
}

// Handle login
$message = "";
if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if ($username === $admin_user && $password === $admin_pass) {
        $_SESSION['admin_logged_in'] = true;
        $_SESSION['admin_user'] = $username;
    } else {
        $message = "Invalid username or password!";
    }
}

// If admin is logged in, show dashboard
if (isset($_SESSION['admin_logged_in']) && $_SESSION['admin_logged_in'] === true):
?>
<!DOCTYPE html>
<html>
<head>
    <title>Admin Dashboard</title>
</head>
<body>
    <h2>Welcome, <?php echo $_SESSION['admin_user']; ?>!</h2>
    <p>This is the admin dashboard.</p>
    <a href="?action=logout">Logout</a>
</body>
</html>

<?php else: // Show login form ?>
<!DOCTYPE html>
<html>
<head>
    <title>Admin Login</title>
</head>
<body>
    <h2>Admin Login</h2>
    <?php if($message) echo "<p style='color:red;'>$message</p>"; ?>
    <form methFirst Visit:
Displays the login form:

Admin Login
Username: [         ]
Password: [         ]
[Login]


After Correct Login (Username: admin, Password: 12345):
Displays dashboard:

Welcome, admin!
This is the admin dashboard.
[Logout]


Click Logout:
Session ends, and the login form is shown again.od="post">

OUTPUT : 
        <label>Username:</label>
        <input type="text" name="username" required><br><br>

        <label>Password:</label>
        <input type="password" name="password" required><br><br>

        <input type="submit" name="login" value="Login">
    </form>
</body>
</html>
<?php endif; ?>

ANSWER : 99

<?php
// (a) Initiate session
session_start();

// (b) Check for existing session entry
if(!isset($_SESSION['visit_count'])) {
    $_SESSION['visit_count'] = 0; // New session
}

// (c) Increment page visit counter
$_SESSION['visit_count']++;

// (d) Store counter back in session (already updated in $_SESSION)

// Handle file upload (f)
$upload_message = "";
if(isset($_POST['upload'])) {
    $target_dir = "uploads/";
    if(!is_dir($target_dir)) {
        mkdir($target_dir, 0777, true); // Create uploads folder if not exists
    }

    $target_file = $target_dir . basename($_FILES["file"]["name"]);

    if(file_exists($target_file)) {
        $upload_message = "Error: File already exists!";
    } else {
        if(move_uploaded_file($_FILES["file"]["tmp_name"], $target_file)) {
            $upload_message = "File uploaded successfully!";
        } else {
            $upload_message = "Error: Failed to upload file.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Session & File Upload Example</title>
</head>
<body>
    <h2>Page Visit Counter</h2>
    <p>You have visited this page <strong><?php echo $_SESSION['visit_count']; ?></strong> times.</p>

    <!-- (e) Link back to this page with session ID -->
    <p><a href="<?php echo $_SERVER['PHP_SELF'] . "?". session_name() . "=" . session_id(); ?>">Refresh Page</a></p>

    <h2>File Upload</h2>
    <?php if($upload_message) echo "<p>$upload_message</p>"; ?>
    <form method="post" enctype="multipart/form-data">
        Select file to upload:
        <input type="file" name="file" required><br><br>
        <input type="submit" name="upload" value="Upload">
    </form>

    <h3>Uploaded Files:</h3>
    <ul>
        <?php
        if(is_dir("uploads")) {
            $files = scandir("uploads");
            foreach($files as $file) {
                if($file != "." && $file != "..") {
                    echo "<li>$file</li>";
                }
            }


OUTPUT : 


Error: File already exists!
Uploaded Files:
- example.txt

        }
        ?>
    </ul>
</body>
</html>



ANSWER : 100

<?php
$upload_message = "";

// Check if form is submitted
if(isset($_POST['upload'])) {
    $target_dir = "uploads/";

    // Create uploads folder if it doesn't exist
    if(!is_dir($target_dir)) {
        mkdir($target_dir, 0777, true);
    }

    $target_file = $target_dir . basename($_FILES["file"]["name"]);

    // Check if file already exists
    if(file_exists($target_file)) {
        $upload_message = "Error: The file '" . basename($_FILES["file"]["name"]) . "' already exists!";
    } else {
        // Move uploaded file to target directory
        if(move_uploaded_file($_FILES["file"]["tmp_name"], $target_file)) {
            $upload_message = "File uploaded successfully!";
        } else {
            $upload_message = "Error: Failed to upload file.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>File Upload Restriction</title>
</head>
<body>
    <h2>Upload a File</h2>

    <?php if($upload_message) echo "<p>$upload_message</p>"; ?>

    <form method="post" enctype="multipart/form-data">
        Select file to upload:
        <input type="file" name="file" required><br><br>
        <input type="submit" name="upload" value="Upload">
    </form>

    <h3>Uploaded Files:</h3>
    <ul>
        <?php
        if(is_dir($target_dir)) {
            $files = scandir($target_dir);
            foreach($files as $file) {
                if($file != "." && $file != "..") {
                    echo "<li>$file</li>";
                }
            }
        }
        ?>
    </ul>
</body>
</html>


OUTPUT : 

File uploaded successfully!
Uploaded Files:
- example.txt


ANSWER : 101

<?php
// Assume a cookie named "user" was set previously
if(isset($_COOKIE['user'])) {
    $username = $_COOKIE['user'];
    echo "Welcome back, " . $username . "!";
} else {
    echo "Hello, guest! Cookie not found.";
}
?>


ANSWER : 102

<?php
// Start a session
session_start();

// Check if session variables exist
if (!isset($_SESSION['visit_count'])) {
    $_SESSION['visit_count'] = 0; // Initialize visit count
    $_SESSION['username'] = "Jenitha"; // Example session variable
}

// Increment visit count
$_SESSION['visit_count']++;
?>

<!DOCTYPE html>
<html>
<head>
    <title>PHP Session Example</title>
</head>
<body>
    <h2>Welcome, <?php echo $_SESSION['username']; ?>!</h2>
    <p>You have visited this page <strong><?php echo $_SESSION['visit_count']; ?></strong> times.</p>

    <p><a href="logout.php">Logout</a></p>
</body>
</html>

OUTPUT : 

Output:

First visit:

Welcome, Jenitha!
You have visited this page 1 times.


Refresh the page:

Welcome, Jenitha!
You have visited this page 2 times.

ANSWER : 103

<?php
// Start the session
session_start();

// Check if the pageview variable exists
if(isset($_SESSION['pageview'])) {
    // If it exists, increment it
    $_SESSION['pageview']++;
} else {
    // If not, initialize it
    $_SESSION['pageview'] = 1;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Pageview Counter</title>
</head>
<body>
    <h2>Simple Pageview Counter</h2>
    <p>You have viewed this page <strong><?php echo $_SESSION['pageview']; ?></strong> times in this session.</p>
</body>
</html>


OUTPUT : 
First visit:

You have viewed this page 1 times in this session.


Second visit (refresh):

You have viewed this page 2 times in this session.


Third visit (refresh):

You have viewed this page 3 times in this session.

ANSWER : 104 
<?php
// Name of the text file
$filename = "sample.txt";

// Line number to read (1-based)
$n = 3; // Change this to any line number

// Check if file exists
if(!file_exists($filename)) {
    die("File does not exist.");
}

// Read the file into an array, each element is a line
$lines = file($filename, FILE_IGNORE_NEW_LINES);

// Check if nth line exists
if(isset($lines[$n - 1])) {
    echo "Line $n: " . $lines[$n - 1];
} else {
    echo "no data";
}
?>


OUTPUT : 

Suppose sample.txt contains:

Line 1 content
Line 2 content
Line 3 content


$n = 2 → Output:

Line 2: Line 2 content


$n = 5 → Output:

no data


ANSWER : 105

<?php
function getWeekStartAndEndDate($week, $year) {
    // Create a DateTime object for January 1st of the year
    $date = new DateTime();
    $date->setISODate($year, $week); // Set the ISO week number and year

    $start = $date->format('Y-m-d'); // Start date (Monday)
    $date->modify('+6 days');         // Add 6 days to get Sunday
    $end = $date->format('Y-m-d');    // End date (Sunday)

    return array('start' => $start, 'end' => $end);
}

// Example usage:
$weekNumber = 34;
$year = 2025;

$weekDates = getWeekStartAndEndDate($weekNumber, $year);
echo "Week $weekNumber of $year starts on " . $weekDates['start'] . " and ends on " . $weekDates['end'];
?>


OUTPUT : 

Week 34 of 2025 starts on 2025-08-18 and ends on 2025-08-24






